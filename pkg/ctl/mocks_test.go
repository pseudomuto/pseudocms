// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pseudomuto/pseudocms/pkg/api/v1 (interfaces: AdminServiceClient,HealthServiceClient)

// Package ctl_test is a generated GoMock package.
package ctl_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/pseudomuto/pseudocms/pkg/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAdminServiceClient is a mock of AdminServiceClient interface
type MockAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceClientMockRecorder
}

// MockAdminServiceClientMockRecorder is the mock recorder for MockAdminServiceClient
type MockAdminServiceClientMockRecorder struct {
	mock *MockAdminServiceClient
}

// NewMockAdminServiceClient creates a new mock instance
func NewMockAdminServiceClient(ctrl *gomock.Controller) *MockAdminServiceClient {
	mock := &MockAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminServiceClient) EXPECT() *MockAdminServiceClientMockRecorder {
	return m.recorder
}

// CreateDefinition mocks base method
func (m *MockAdminServiceClient) CreateDefinition(arg0 context.Context, arg1 *v1.CreateDefinitionRequest, arg2 ...grpc.CallOption) (*v1.CreateDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDefinition", varargs...)
	ret0, _ := ret[0].(*v1.CreateDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefinition indicates an expected call of CreateDefinition
func (mr *MockAdminServiceClientMockRecorder) CreateDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefinition", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateDefinition), varargs...)
}

// CreateField mocks base method
func (m *MockAdminServiceClient) CreateField(arg0 context.Context, arg1 *v1.CreateFieldRequest, arg2 ...grpc.CallOption) (*v1.CreateFieldResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateField", varargs...)
	ret0, _ := ret[0].(*v1.CreateFieldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateField indicates an expected call of CreateField
func (mr *MockAdminServiceClientMockRecorder) CreateField(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateField", reflect.TypeOf((*MockAdminServiceClient)(nil).CreateField), varargs...)
}

// GetDefinition mocks base method
func (m *MockAdminServiceClient) GetDefinition(arg0 context.Context, arg1 *v1.GetDefinitionRequest, arg2 ...grpc.CallOption) (*v1.GetDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefinition", varargs...)
	ret0, _ := ret[0].(*v1.GetDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefinition indicates an expected call of GetDefinition
func (mr *MockAdminServiceClientMockRecorder) GetDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefinition", reflect.TypeOf((*MockAdminServiceClient)(nil).GetDefinition), varargs...)
}

// ListDefinitions mocks base method
func (m *MockAdminServiceClient) ListDefinitions(arg0 context.Context, arg1 *v1.ListDefinitionsRequest, arg2 ...grpc.CallOption) (v1.AdminService_ListDefinitionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDefinitions", varargs...)
	ret0, _ := ret[0].(v1.AdminService_ListDefinitionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDefinitions indicates an expected call of ListDefinitions
func (mr *MockAdminServiceClientMockRecorder) ListDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDefinitions", reflect.TypeOf((*MockAdminServiceClient)(nil).ListDefinitions), varargs...)
}

// MockHealthServiceClient is a mock of HealthServiceClient interface
type MockHealthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceClientMockRecorder
}

// MockHealthServiceClientMockRecorder is the mock recorder for MockHealthServiceClient
type MockHealthServiceClientMockRecorder struct {
	mock *MockHealthServiceClient
}

// NewMockHealthServiceClient creates a new mock instance
func NewMockHealthServiceClient(ctrl *gomock.Controller) *MockHealthServiceClient {
	mock := &MockHealthServiceClient{ctrl: ctrl}
	mock.recorder = &MockHealthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthServiceClient) EXPECT() *MockHealthServiceClientMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockHealthServiceClient) Ping(arg0 context.Context, arg1 *v1.PingRequest, arg2 ...grpc.CallOption) (*v1.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*v1.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockHealthServiceClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthServiceClient)(nil).Ping), varargs...)
}
